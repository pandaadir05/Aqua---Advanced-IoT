"""
Core vulnerability module for IoT Penetration Testing Framework.
"""

from enum import Enum
from typing import List, Optional
from pydantic import BaseModel

class Severity(Enum):
    """Vulnerability severity levels."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class VulnerabilityType(Enum):
    """Types of vulnerabilities."""
    WEAK_AUTHENTICATION = "weak_authentication"
    WEAK_ENCRYPTION = "weak_encryption"
    INSECURE_COMMUNICATION = "insecure_communication"
    EXPOSED_SERVICES = "exposed_services"
    DEFAULT_CREDENTIALS = "default_credentials"
    FIRMWARE_VULNERABILITY = "firmware_vulnerability"
    PROTOCOL_VULNERABILITY = "protocol_vulnerability"
    CONFIGURATION_ISSUE = "configuration_issue"
    KNOWN_CVE = "known_cve"

class Vulnerability(BaseModel):
    """Class representing a vulnerability."""
    
    name: str
    description: str
    type: VulnerabilityType
    severity: Severity
    cve: Optional[str] = None
    cvss_score: Optional[float] = None
    affected_components: List[str] = []
    remediation: Optional[str] = None
    references: List[str] = []
    
    def to_report(self) -> dict:
        """Convert vulnerability to report format."""
        return {
            "name": self.name,
            "description": self.description,
            "type": self.type.value,
            "severity": self.severity.value,
            "cve": self.cve,
            "cvss_score": self.cvss_score,
            "affected_components": self.affected_components,
            "remediation": self.remediation,
            "references": self.references
        } 