"""
Core exploit module for IoT Penetration Testing Framework.
"""

from enum import Enum
from typing import Dict, Any, Optional
from pydantic import BaseModel

class ExploitType(Enum):
    """Types of exploits."""
    COMMAND_INJECTION = "command_injection"
    BUFFER_OVERFLOW = "buffer_overflow"
    AUTHENTICATION_BYPASS = "authentication_bypass"
    FIRMWARE_EXTRACTION = "firmware_extraction"
    PROTOCOL_ABUSE = "protocol_abuse"
    DEFAULT_CREDENTIALS = "default_credentials"
    INFORMATION_DISCLOSURE = "information_disclosure"
    DENIAL_OF_SERVICE = "denial_of_service"

class ExploitStatus(Enum):
    """Status of exploit execution."""
    NOT_STARTED = "not_started"
    IN_PROGRESS = "in_progress"
    SUCCESS = "success"
    FAILED = "failed"

class Exploit(BaseModel):
    """Base class for all exploits."""
    
    name: str
    description: str
    type: ExploitType
    cve: Optional[str] = None
    requirements: Dict[str, Any] = {}
    status: ExploitStatus = ExploitStatus.NOT_STARTED
    
    async def execute(self, **kwargs) -> bool:
        """
        Execute the exploit.
        
        Args:
            **kwargs: Additional arguments required for the exploit
            
        Returns:
            bool: True if exploit was successful, False otherwise
        """
        raise NotImplementedError("Exploit execution not implemented")
    
    def cleanup(self) -> None:
        """Clean up after exploit execution."""
        pass 